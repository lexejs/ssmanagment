#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SSManagment.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SM")]
	public partial class ssmDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertbuyer(buyer instance);
    partial void Updatebuyer(buyer instance);
    partial void Deletebuyer(buyer instance);
    partial void Insertseller(seller instance);
    partial void Updateseller(seller instance);
    partial void Deleteseller(seller instance);
    partial void Insertgroup(group instance);
    partial void Updategroup(group instance);
    partial void Deletegroup(group instance);
    partial void Insertitem(item instance);
    partial void Updateitem(item instance);
    partial void Deleteitem(item instance);
    partial void InsertlogActivity(logActivity instance);
    partial void UpdatelogActivity(logActivity instance);
    partial void DeletelogActivity(logActivity instance);
    partial void InsertlogSale(logSale instance);
    partial void UpdatelogSale(logSale instance);
    partial void DeletelogSale(logSale instance);
    #endregion
		
		public ssmDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SMConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ssmDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ssmDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ssmDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ssmDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<buyer> buyers
		{
			get
			{
				return this.GetTable<buyer>();
			}
		}
		
		public System.Data.Linq.Table<seller> sellers
		{
			get
			{
				return this.GetTable<seller>();
			}
		}
		
		public System.Data.Linq.Table<group> groups
		{
			get
			{
				return this.GetTable<group>();
			}
		}
		
		public System.Data.Linq.Table<item> items
		{
			get
			{
				return this.GetTable<item>();
			}
		}
		
		public System.Data.Linq.Table<logActivity> logActivities
		{
			get
			{
				return this.GetTable<logActivity>();
			}
		}
		
		public System.Data.Linq.Table<logSale> logSales
		{
			get
			{
				return this.GetTable<logSale>();
			}
		}
	}
	
	[Table(Name="dbo.buyer")]
	public partial class buyer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<double> _pct;
		
		private System.Nullable<bool> _isActive;
		
		private EntitySet<logSale> _logSales;
		
		private EntitySet<logActivity> _logActivities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpctChanging(System.Nullable<double> value);
    partial void OnpctChanged();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    #endregion
		
		public buyer()
		{
			this._logSales = new EntitySet<logSale>(new Action<logSale>(this.attach_logSales), new Action<logSale>(this.detach_logSales));
			this._logActivities = new EntitySet<logActivity>(new Action<logActivity>(this.attach_logActivities), new Action<logActivity>(this.detach_logActivities));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_pct", DbType="Float")]
		public System.Nullable<double> pct
		{
			get
			{
				return this._pct;
			}
			set
			{
				if ((this._pct != value))
				{
					this.OnpctChanging(value);
					this.SendPropertyChanging();
					this._pct = value;
					this.SendPropertyChanged("pct");
					this.OnpctChanged();
				}
			}
		}
		
		[Column(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[Association(Name="buyer_logSale", Storage="_logSales", ThisKey="id", OtherKey="buyerId")]
		public EntitySet<logSale> logSales
		{
			get
			{
				return this._logSales;
			}
			set
			{
				this._logSales.Assign(value);
			}
		}
		
		[Association(Name="buyer_logActivity", Storage="_logActivities", ThisKey="id", OtherKey="buyerId")]
		public EntitySet<logActivity> logActivities
		{
			get
			{
				return this._logActivities;
			}
			set
			{
				this._logActivities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_logSales(logSale entity)
		{
			this.SendPropertyChanging();
			entity.buyer = this;
		}
		
		private void detach_logSales(logSale entity)
		{
			this.SendPropertyChanging();
			entity.buyer = null;
		}
		
		private void attach_logActivities(logActivity entity)
		{
			this.SendPropertyChanging();
			entity.buyer = this;
		}
		
		private void detach_logActivities(logActivity entity)
		{
			this.SendPropertyChanging();
			entity.buyer = null;
		}
	}
	
	[Table(Name="dbo.seller")]
	public partial class seller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _fullName;
		
		private System.Nullable<bool> _isAdmin;
		
		private string _login;
		
		private string _password;
		
		private System.Nullable<bool> _isActive;
		
		private EntitySet<logSale> _logSales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnisAdminChanging(System.Nullable<bool> value);
    partial void OnisAdminChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    #endregion
		
		public seller()
		{
			this._logSales = new EntitySet<logSale>(new Action<logSale>(this.attach_logSales), new Action<logSale>(this.detach_logSales));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_fullName", DbType="VarChar(50)")]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[Column(Storage="_isAdmin", DbType="Bit")]
		public System.Nullable<bool> isAdmin
		{
			get
			{
				return this._isAdmin;
			}
			set
			{
				if ((this._isAdmin != value))
				{
					this.OnisAdminChanging(value);
					this.SendPropertyChanging();
					this._isAdmin = value;
					this.SendPropertyChanged("isAdmin");
					this.OnisAdminChanged();
				}
			}
		}
		
		[Column(Storage="_login", DbType="VarChar(50)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="VarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Column(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[Association(Name="seller_logSale", Storage="_logSales", ThisKey="id", OtherKey="sellerId")]
		public EntitySet<logSale> logSales
		{
			get
			{
				return this._logSales;
			}
			set
			{
				this._logSales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_logSales(logSale entity)
		{
			this.SendPropertyChanging();
			entity.seller = this;
		}
		
		private void detach_logSales(logSale entity)
		{
			this.SendPropertyChanging();
			entity.seller = null;
		}
	}
	
	[Table(Name="dbo.[group]")]
	public partial class group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _parent;
		
		private EntitySet<group> _groups;
		
		private EntitySet<item> _items;
		
		private EntityRef<group> _group1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnparentChanging(System.Nullable<int> value);
    partial void OnparentChanged();
    #endregion
		
		public group()
		{
			this._groups = new EntitySet<group>(new Action<group>(this.attach_groups), new Action<group>(this.detach_groups));
			this._items = new EntitySet<item>(new Action<item>(this.attach_items), new Action<item>(this.detach_items));
			this._group1 = default(EntityRef<group>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(250)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_parent", DbType="Int")]
		public System.Nullable<int> parent
		{
			get
			{
				return this._parent;
			}
			set
			{
				if ((this._parent != value))
				{
					if (this._group1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentChanging(value);
					this.SendPropertyChanging();
					this._parent = value;
					this.SendPropertyChanged("parent");
					this.OnparentChanged();
				}
			}
		}
		
		[Association(Name="group_group", Storage="_groups", ThisKey="id", OtherKey="parent")]
		public EntitySet<group> groups
		{
			get
			{
				return this._groups;
			}
			set
			{
				this._groups.Assign(value);
			}
		}
		
		[Association(Name="group_item", Storage="_items", ThisKey="id", OtherKey="groupId")]
		public EntitySet<item> items
		{
			get
			{
				return this._items;
			}
			set
			{
				this._items.Assign(value);
			}
		}
		
		[Association(Name="group_group", Storage="_group1", ThisKey="parent", OtherKey="id", IsForeignKey=true)]
		public group group1
		{
			get
			{
				return this._group1.Entity;
			}
			set
			{
				group previousValue = this._group1.Entity;
				if (((previousValue != value) 
							|| (this._group1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._group1.Entity = null;
						previousValue.groups.Remove(this);
					}
					this._group1.Entity = value;
					if ((value != null))
					{
						value.groups.Add(this);
						this._parent = value.id;
					}
					else
					{
						this._parent = default(Nullable<int>);
					}
					this.SendPropertyChanged("group1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_groups(group entity)
		{
			this.SendPropertyChanging();
			entity.group1 = this;
		}
		
		private void detach_groups(group entity)
		{
			this.SendPropertyChanging();
			entity.group1 = null;
		}
		
		private void attach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.group = this;
		}
		
		private void detach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.group = null;
		}
	}
	
	[Table(Name="dbo.item")]
	public partial class item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _groupId;
		
		private System.Nullable<int> _count;
		
		private string _measure;
		
		private System.Nullable<double> _price;
		
		private System.Nullable<double> _pct;
		
		private System.Nullable<double> _adminPrice;
		
		private System.Nullable<int> _reserveCount;
		
		private System.Nullable<System.DateTime> _reserveEndDate;
		
		private System.Nullable<bool> _order;
		
		private System.Nullable<int> _countToOrder;
		
		private System.Nullable<bool> _canGiveBack;
		
		private EntitySet<logSale> _logSales;
		
		private EntityRef<group> _group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OngroupIdChanging(System.Nullable<int> value);
    partial void OngroupIdChanged();
    partial void OncountChanging(System.Nullable<int> value);
    partial void OncountChanged();
    partial void OnmeasureChanging(string value);
    partial void OnmeasureChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OnpctChanging(System.Nullable<double> value);
    partial void OnpctChanged();
    partial void OnadminPriceChanging(System.Nullable<double> value);
    partial void OnadminPriceChanged();
    partial void OnreserveCountChanging(System.Nullable<int> value);
    partial void OnreserveCountChanged();
    partial void OnreserveEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnreserveEndDateChanged();
    partial void OnorderChanging(System.Nullable<bool> value);
    partial void OnorderChanged();
    partial void OncountToOrderChanging(System.Nullable<int> value);
    partial void OncountToOrderChanged();
    partial void OncanGiveBackChanging(System.Nullable<bool> value);
    partial void OncanGiveBackChanged();
    #endregion
		
		public item()
		{
			this._logSales = new EntitySet<logSale>(new Action<logSale>(this.attach_logSales), new Action<logSale>(this.detach_logSales));
			this._group = default(EntityRef<group>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(500)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_groupId", DbType="Int")]
		public System.Nullable<int> groupId
		{
			get
			{
				return this._groupId;
			}
			set
			{
				if ((this._groupId != value))
				{
					if (this._group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupIdChanging(value);
					this.SendPropertyChanging();
					this._groupId = value;
					this.SendPropertyChanged("groupId");
					this.OngroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_count", DbType="Int")]
		public System.Nullable<int> count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		[Column(Storage="_measure", DbType="VarChar(50)")]
		public string measure
		{
			get
			{
				return this._measure;
			}
			set
			{
				if ((this._measure != value))
				{
					this.OnmeasureChanging(value);
					this.SendPropertyChanging();
					this._measure = value;
					this.SendPropertyChanged("measure");
					this.OnmeasureChanged();
				}
			}
		}
		
		[Column(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[Column(Storage="_pct", DbType="Float")]
		public System.Nullable<double> pct
		{
			get
			{
				return this._pct;
			}
			set
			{
				if ((this._pct != value))
				{
					this.OnpctChanging(value);
					this.SendPropertyChanging();
					this._pct = value;
					this.SendPropertyChanged("pct");
					this.OnpctChanged();
				}
			}
		}
		
		[Column(Storage="_adminPrice", DbType="Float")]
		public System.Nullable<double> adminPrice
		{
			get
			{
				return this._adminPrice;
			}
			set
			{
				if ((this._adminPrice != value))
				{
					this.OnadminPriceChanging(value);
					this.SendPropertyChanging();
					this._adminPrice = value;
					this.SendPropertyChanged("adminPrice");
					this.OnadminPriceChanged();
				}
			}
		}
		
		[Column(Storage="_reserveCount", DbType="Int")]
		public System.Nullable<int> reserveCount
		{
			get
			{
				return this._reserveCount;
			}
			set
			{
				if ((this._reserveCount != value))
				{
					this.OnreserveCountChanging(value);
					this.SendPropertyChanging();
					this._reserveCount = value;
					this.SendPropertyChanged("reserveCount");
					this.OnreserveCountChanged();
				}
			}
		}
		
		[Column(Storage="_reserveEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> reserveEndDate
		{
			get
			{
				return this._reserveEndDate;
			}
			set
			{
				if ((this._reserveEndDate != value))
				{
					this.OnreserveEndDateChanging(value);
					this.SendPropertyChanging();
					this._reserveEndDate = value;
					this.SendPropertyChanged("reserveEndDate");
					this.OnreserveEndDateChanged();
				}
			}
		}
		
		[Column(Name="[order]", Storage="_order", DbType="Bit")]
		public System.Nullable<bool> order
		{
			get
			{
				return this._order;
			}
			set
			{
				if ((this._order != value))
				{
					this.OnorderChanging(value);
					this.SendPropertyChanging();
					this._order = value;
					this.SendPropertyChanged("order");
					this.OnorderChanged();
				}
			}
		}
		
		[Column(Storage="_countToOrder", DbType="Int")]
		public System.Nullable<int> countToOrder
		{
			get
			{
				return this._countToOrder;
			}
			set
			{
				if ((this._countToOrder != value))
				{
					this.OncountToOrderChanging(value);
					this.SendPropertyChanging();
					this._countToOrder = value;
					this.SendPropertyChanged("countToOrder");
					this.OncountToOrderChanged();
				}
			}
		}
		
		[Column(Storage="_canGiveBack", DbType="Bit")]
		public System.Nullable<bool> canGiveBack
		{
			get
			{
				return this._canGiveBack;
			}
			set
			{
				if ((this._canGiveBack != value))
				{
					this.OncanGiveBackChanging(value);
					this.SendPropertyChanging();
					this._canGiveBack = value;
					this.SendPropertyChanged("canGiveBack");
					this.OncanGiveBackChanged();
				}
			}
		}
		
		[Association(Name="item_logSale", Storage="_logSales", ThisKey="id", OtherKey="itemId")]
		public EntitySet<logSale> logSales
		{
			get
			{
				return this._logSales;
			}
			set
			{
				this._logSales.Assign(value);
			}
		}
		
		[Association(Name="group_item", Storage="_group", ThisKey="groupId", OtherKey="id", IsForeignKey=true)]
		public group group
		{
			get
			{
				return this._group.Entity;
			}
			set
			{
				group previousValue = this._group.Entity;
				if (((previousValue != value) 
							|| (this._group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._group.Entity = null;
						previousValue.items.Remove(this);
					}
					this._group.Entity = value;
					if ((value != null))
					{
						value.items.Add(this);
						this._groupId = value.id;
					}
					else
					{
						this._groupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_logSales(logSale entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_logSales(logSale entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
	}
	
	[Table(Name="dbo.logActivity")]
	public partial class logActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _action;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<int> _buyerId;
		
		private System.Nullable<bool> _informAdmin;
		
		private EntityRef<buyer> _buyer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactionChanging(string value);
    partial void OnactionChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnbuyerIdChanging(System.Nullable<int> value);
    partial void OnbuyerIdChanged();
    partial void OninformAdminChanging(System.Nullable<bool> value);
    partial void OninformAdminChanged();
    #endregion
		
		public logActivity()
		{
			this._buyer = default(EntityRef<buyer>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_action", DbType="VarChar(150)")]
		public string action
		{
			get
			{
				return this._action;
			}
			set
			{
				if ((this._action != value))
				{
					this.OnactionChanging(value);
					this.SendPropertyChanging();
					this._action = value;
					this.SendPropertyChanged("action");
					this.OnactionChanged();
				}
			}
		}
		
		[Column(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[Column(Storage="_buyerId", DbType="Int")]
		public System.Nullable<int> buyerId
		{
			get
			{
				return this._buyerId;
			}
			set
			{
				if ((this._buyerId != value))
				{
					if (this._buyer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbuyerIdChanging(value);
					this.SendPropertyChanging();
					this._buyerId = value;
					this.SendPropertyChanged("buyerId");
					this.OnbuyerIdChanged();
				}
			}
		}
		
		[Column(Storage="_informAdmin", DbType="Bit")]
		public System.Nullable<bool> informAdmin
		{
			get
			{
				return this._informAdmin;
			}
			set
			{
				if ((this._informAdmin != value))
				{
					this.OninformAdminChanging(value);
					this.SendPropertyChanging();
					this._informAdmin = value;
					this.SendPropertyChanged("informAdmin");
					this.OninformAdminChanged();
				}
			}
		}
		
		[Association(Name="buyer_logActivity", Storage="_buyer", ThisKey="buyerId", OtherKey="id", IsForeignKey=true)]
		public buyer buyer
		{
			get
			{
				return this._buyer.Entity;
			}
			set
			{
				buyer previousValue = this._buyer.Entity;
				if (((previousValue != value) 
							|| (this._buyer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._buyer.Entity = null;
						previousValue.logActivities.Remove(this);
					}
					this._buyer.Entity = value;
					if ((value != null))
					{
						value.logActivities.Add(this);
						this._buyerId = value.id;
					}
					else
					{
						this._buyerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("buyer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.logSales")]
	public partial class logSale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _itemId;
		
		private System.Nullable<int> _itemsCount;
		
		private System.Nullable<int> _buyerId;
		
		private System.Nullable<int> _sellerId;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<bool> _isGiveBack;
		
		private EntityRef<item> _item;
		
		private EntityRef<seller> _seller;
		
		private EntityRef<buyer> _buyer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnitemIdChanging(System.Nullable<int> value);
    partial void OnitemIdChanged();
    partial void OnitemsCountChanging(System.Nullable<int> value);
    partial void OnitemsCountChanged();
    partial void OnbuyerIdChanging(System.Nullable<int> value);
    partial void OnbuyerIdChanged();
    partial void OnsellerIdChanging(System.Nullable<int> value);
    partial void OnsellerIdChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnisGiveBackChanging(System.Nullable<bool> value);
    partial void OnisGiveBackChanged();
    #endregion
		
		public logSale()
		{
			this._item = default(EntityRef<item>);
			this._seller = default(EntityRef<seller>);
			this._buyer = default(EntityRef<buyer>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_itemId", DbType="Int")]
		public System.Nullable<int> itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[Column(Storage="_itemsCount", DbType="Int")]
		public System.Nullable<int> itemsCount
		{
			get
			{
				return this._itemsCount;
			}
			set
			{
				if ((this._itemsCount != value))
				{
					this.OnitemsCountChanging(value);
					this.SendPropertyChanging();
					this._itemsCount = value;
					this.SendPropertyChanged("itemsCount");
					this.OnitemsCountChanged();
				}
			}
		}
		
		[Column(Storage="_buyerId", DbType="Int")]
		public System.Nullable<int> buyerId
		{
			get
			{
				return this._buyerId;
			}
			set
			{
				if ((this._buyerId != value))
				{
					if (this._buyer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbuyerIdChanging(value);
					this.SendPropertyChanging();
					this._buyerId = value;
					this.SendPropertyChanged("buyerId");
					this.OnbuyerIdChanged();
				}
			}
		}
		
		[Column(Storage="_sellerId", DbType="Int")]
		public System.Nullable<int> sellerId
		{
			get
			{
				return this._sellerId;
			}
			set
			{
				if ((this._sellerId != value))
				{
					if (this._seller.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsellerIdChanging(value);
					this.SendPropertyChanging();
					this._sellerId = value;
					this.SendPropertyChanged("sellerId");
					this.OnsellerIdChanged();
				}
			}
		}
		
		[Column(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[Column(Storage="_isGiveBack", DbType="Bit")]
		public System.Nullable<bool> isGiveBack
		{
			get
			{
				return this._isGiveBack;
			}
			set
			{
				if ((this._isGiveBack != value))
				{
					this.OnisGiveBackChanging(value);
					this.SendPropertyChanging();
					this._isGiveBack = value;
					this.SendPropertyChanged("isGiveBack");
					this.OnisGiveBackChanged();
				}
			}
		}
		
		[Association(Name="item_logSale", Storage="_item", ThisKey="itemId", OtherKey="id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.logSales.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.logSales.Add(this);
						this._itemId = value.id;
					}
					else
					{
						this._itemId = default(Nullable<int>);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		[Association(Name="seller_logSale", Storage="_seller", ThisKey="sellerId", OtherKey="id", IsForeignKey=true)]
		public seller seller
		{
			get
			{
				return this._seller.Entity;
			}
			set
			{
				seller previousValue = this._seller.Entity;
				if (((previousValue != value) 
							|| (this._seller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._seller.Entity = null;
						previousValue.logSales.Remove(this);
					}
					this._seller.Entity = value;
					if ((value != null))
					{
						value.logSales.Add(this);
						this._sellerId = value.id;
					}
					else
					{
						this._sellerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("seller");
				}
			}
		}
		
		[Association(Name="buyer_logSale", Storage="_buyer", ThisKey="buyerId", OtherKey="id", IsForeignKey=true)]
		public buyer buyer
		{
			get
			{
				return this._buyer.Entity;
			}
			set
			{
				buyer previousValue = this._buyer.Entity;
				if (((previousValue != value) 
							|| (this._buyer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._buyer.Entity = null;
						previousValue.logSales.Remove(this);
					}
					this._buyer.Entity = value;
					if ((value != null))
					{
						value.logSales.Add(this);
						this._buyerId = value.id;
					}
					else
					{
						this._buyerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("buyer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
