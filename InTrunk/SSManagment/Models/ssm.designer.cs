#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SSManagment.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SM")]
	public partial class ssmDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertgroup(group instance);
    partial void Updategroup(group instance);
    partial void Deletegroup(group instance);
    partial void Insertitem(item instance);
    partial void Updateitem(item instance);
    partial void Deleteitem(item instance);
    #endregion
		
		public ssmDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SMConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ssmDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ssmDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ssmDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ssmDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<group> groups
		{
			get
			{
				return this.GetTable<group>();
			}
		}
		
		public System.Data.Linq.Table<item> items
		{
			get
			{
				return this.GetTable<item>();
			}
		}
	}
	
	[Table(Name="dbo.[group]")]
	public partial class group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _parentId;
		
		private EntitySet<group> _groups;
		
		private EntitySet<item> _items;
		
		private EntityRef<group> _group1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnparentIdChanging(System.Nullable<int> value);
    partial void OnparentIdChanged();
    #endregion
		
		public group()
		{
			this._groups = new EntitySet<group>(new Action<group>(this.attach_groups), new Action<group>(this.detach_groups));
			this._items = new EntitySet<item>(new Action<item>(this.attach_items), new Action<item>(this.detach_items));
			this._group1 = default(EntityRef<group>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(250)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Name="parent", Storage="_parentId", DbType="Int")]
		public System.Nullable<int> parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[Association(Name="group_group", Storage="_groups", ThisKey="id", OtherKey="parentId")]
		public EntitySet<group> groups
		{
			get
			{
				return this._groups;
			}
			set
			{
				this._groups.Assign(value);
			}
		}
		
		[Association(Name="group_item", Storage="_items", ThisKey="id", OtherKey="groupId")]
		public EntitySet<item> items
		{
			get
			{
				return this._items;
			}
			set
			{
				this._items.Assign(value);
			}
		}
		
		[Association(Name="group_group", Storage="_group1", ThisKey="parentId", OtherKey="id", IsForeignKey=true)]
		public group group1
		{
			get
			{
				return this._group1.Entity;
			}
			set
			{
				group previousValue = this._group1.Entity;
				if (((previousValue != value) 
							|| (this._group1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._group1.Entity = null;
						previousValue.groups.Remove(this);
					}
					this._group1.Entity = value;
					if ((value != null))
					{
						value.groups.Add(this);
						this._parentId = value.id;
					}
					else
					{
						this._parentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("group1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_groups(group entity)
		{
			this.SendPropertyChanging();
			entity.group1 = this;
		}
		
		private void detach_groups(group entity)
		{
			this.SendPropertyChanging();
			entity.group1 = null;
		}
		
		private void attach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.group = this;
		}
		
		private void detach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.group = null;
		}
	}
	
	[Table(Name="dbo.item")]
	public partial class item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _groupId;
		
		private System.Nullable<int> _count;
		
		private string _measure;
		
		private System.Nullable<double> _price;
		
		private System.Nullable<double> _pct;
		
		private System.Nullable<double> _adminPrice;
		
		private System.Nullable<int> _reserveCount;
		
		private System.Nullable<System.DateTime> _reserveEndDate;
		
		private System.Nullable<bool> _order;
		
		private System.Nullable<int> _countToOrder;
		
		private System.Nullable<bool> _canGiveBack;
		
		private EntityRef<group> _group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OngroupIdChanging(System.Nullable<int> value);
    partial void OngroupIdChanged();
    partial void OncountChanging(System.Nullable<int> value);
    partial void OncountChanged();
    partial void OnmeasureChanging(string value);
    partial void OnmeasureChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OnpctChanging(System.Nullable<double> value);
    partial void OnpctChanged();
    partial void OnadminPriceChanging(System.Nullable<double> value);
    partial void OnadminPriceChanged();
    partial void OnreserveCountChanging(System.Nullable<int> value);
    partial void OnreserveCountChanged();
    partial void OnreserveEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnreserveEndDateChanged();
    partial void OnorderChanging(System.Nullable<bool> value);
    partial void OnorderChanged();
    partial void OncountToOrderChanging(System.Nullable<int> value);
    partial void OncountToOrderChanged();
    partial void OncanGiveBackChanging(System.Nullable<bool> value);
    partial void OncanGiveBackChanged();
    #endregion
		
		public item()
		{
			this._group = default(EntityRef<group>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(500)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_groupId", DbType="Int")]
		public System.Nullable<int> groupId
		{
			get
			{
				return this._groupId;
			}
			set
			{
				if ((this._groupId != value))
				{
					if (this._group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupIdChanging(value);
					this.SendPropertyChanging();
					this._groupId = value;
					this.SendPropertyChanged("groupId");
					this.OngroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_count", DbType="Int")]
		public System.Nullable<int> count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		[Column(Storage="_measure", DbType="VarChar(50)")]
		public string measure
		{
			get
			{
				return this._measure;
			}
			set
			{
				if ((this._measure != value))
				{
					this.OnmeasureChanging(value);
					this.SendPropertyChanging();
					this._measure = value;
					this.SendPropertyChanged("measure");
					this.OnmeasureChanged();
				}
			}
		}
		
		[Column(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[Column(Storage="_pct", DbType="Float")]
		public System.Nullable<double> pct
		{
			get
			{
				return this._pct;
			}
			set
			{
				if ((this._pct != value))
				{
					this.OnpctChanging(value);
					this.SendPropertyChanging();
					this._pct = value;
					this.SendPropertyChanged("pct");
					this.OnpctChanged();
				}
			}
		}
		
		[Column(Storage="_adminPrice", DbType="Float")]
		public System.Nullable<double> adminPrice
		{
			get
			{
				return this._adminPrice;
			}
			set
			{
				if ((this._adminPrice != value))
				{
					this.OnadminPriceChanging(value);
					this.SendPropertyChanging();
					this._adminPrice = value;
					this.SendPropertyChanged("adminPrice");
					this.OnadminPriceChanged();
				}
			}
		}
		
		[Column(Storage="_reserveCount", DbType="Int")]
		public System.Nullable<int> reserveCount
		{
			get
			{
				return this._reserveCount;
			}
			set
			{
				if ((this._reserveCount != value))
				{
					this.OnreserveCountChanging(value);
					this.SendPropertyChanging();
					this._reserveCount = value;
					this.SendPropertyChanged("reserveCount");
					this.OnreserveCountChanged();
				}
			}
		}
		
		[Column(Storage="_reserveEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> reserveEndDate
		{
			get
			{
				return this._reserveEndDate;
			}
			set
			{
				if ((this._reserveEndDate != value))
				{
					this.OnreserveEndDateChanging(value);
					this.SendPropertyChanging();
					this._reserveEndDate = value;
					this.SendPropertyChanged("reserveEndDate");
					this.OnreserveEndDateChanged();
				}
			}
		}
		
		[Column(Name="[order]", Storage="_order", DbType="Bit")]
		public System.Nullable<bool> order
		{
			get
			{
				return this._order;
			}
			set
			{
				if ((this._order != value))
				{
					this.OnorderChanging(value);
					this.SendPropertyChanging();
					this._order = value;
					this.SendPropertyChanged("order");
					this.OnorderChanged();
				}
			}
		}
		
		[Column(Storage="_countToOrder", DbType="Int")]
		public System.Nullable<int> countToOrder
		{
			get
			{
				return this._countToOrder;
			}
			set
			{
				if ((this._countToOrder != value))
				{
					this.OncountToOrderChanging(value);
					this.SendPropertyChanging();
					this._countToOrder = value;
					this.SendPropertyChanged("countToOrder");
					this.OncountToOrderChanged();
				}
			}
		}
		
		[Column(Storage="_canGiveBack", DbType="Bit")]
		public System.Nullable<bool> canGiveBack
		{
			get
			{
				return this._canGiveBack;
			}
			set
			{
				if ((this._canGiveBack != value))
				{
					this.OncanGiveBackChanging(value);
					this.SendPropertyChanging();
					this._canGiveBack = value;
					this.SendPropertyChanged("canGiveBack");
					this.OncanGiveBackChanged();
				}
			}
		}
		
		[Association(Name="group_item", Storage="_group", ThisKey="groupId", OtherKey="id", IsForeignKey=true)]
		public group group
		{
			get
			{
				return this._group.Entity;
			}
			set
			{
				group previousValue = this._group.Entity;
				if (((previousValue != value) 
							|| (this._group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._group.Entity = null;
						previousValue.items.Remove(this);
					}
					this._group.Entity = value;
					if ((value != null))
					{
						value.items.Add(this);
						this._groupId = value.id;
					}
					else
					{
						this._groupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
